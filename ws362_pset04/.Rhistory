paste("Hello", "world!", sep=" ")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnom(1000)
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data<-sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
my_data/0
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3, 5, 7)
[c(3, 5, 7)]
c(3, 5, 7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
named(vect)
names(vect)
vec2 <- c(11, 2, NA)
vec2 <- c(11, 2, NA)
vec2 <- c(11, 2, NA)
vec2 <- c(c(11, 2, NA))
vec2 <- c(c(11, 2, NA))
vec2 <- c(""=c(11, 2, NA))
vec2 <- c(""=c(11, 2, NA))
vec2 <- c("a"=c(11, 2, NA))
vect2 <- c("a"=c(11, 2, NA))
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
clonames(cnames)
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 == 7
5 == 7
5 != 7
7 ==  5
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE,
| FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE,
+ FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints)
which(ints[i >= 8])
which(ints[7:])
?which
which(ints > 7)
anY(ints < 0)
any(ints < 0)
all(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4,5))
submit()
print
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("helo")
telegram("helo")
submit()
submit9)
submit()
mad_libs(place = '1', adjective = '2', noun = '3')
submit9)
submit()
submit()
'I'%p%'love'%p%'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_vect)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flg_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors[1:6])
head(flag_colors)
?head
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
sapply(flag_colors, range)
lapply(flag_colors, range)
lapply(flag_shapes, range)
shame_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unqiue)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,
| character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
flags$animate
flags
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, , summary)
tapply(flags$population, landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), prob = c(0.3, 0.7))
flips <- sample(c(0, 1),100, replace = TRUE prob = c(0.3, 0.7))
flips <- sample(c(0, 1),100, replace = TRUE,prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(n = 100, size=1, prob=0.7)
flips2
sum(flips2)
?nrom
??nrom
?rnorm
rnorm(10)
rnom(100, sd = 25)
rnorm(100, sd = 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
replicate(100, repois(5, 10))
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
info()
main()
nxt()
nxt()
nxt()
nxt()
info()
main()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
d1 <- Sys.Date()
class(d1)
unclass(d`)
''
`
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
tw <- as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
d1 <- weekdays()
d1 <- weekdays(Sys.time())
weekdays(d1
)
months(d1ï¼‰
months(d1)
months(t1)
quarters(t2)
t3 =  "October 17, 1986
| 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot()
>pot
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
args(plot)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", y="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,xlab="Speed" ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,xlab="Speed",ylab="Stopping Distance", main = "My Plot")
plot(cars,main = "My Plot")
?plot
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch = 2)
data.frame(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl, mtcars)
hist(mtcars$mpg)
library(stockPortfolio)
cBac <- getReturns(c('HD'), start='2006-10-01',end='2015-10-01')
cBac
cBac <- getReturns(c('AAPL'), start='2006-10-01',end='2015-10-01')
cBac
gsub("[^A-Za-z0-9]", "", "   sdfdsfds # sdfdf")
a
str(a)
ls()
ls.str()
dir()
seq(1:5)
seq(1,5)
seq(along=10)
seq(along="abd")
length('abc')
length(c('abc','d')
)
a = c('a','b')
seq(along=a)
data.frame(v=1:4,ch=c("a","B","c","d"),n=10)
array(c(1,2), dim=c(3, 4,2))
list(a=c(1,2),b="hi",c=3i);
a  = matrix(c(1, 2), nrow =2, ncol = 2)
a
unique(a)
unique(a)
a = c(1,2,3,3)
unique(a)
str(a)
a  = matrix(c(1, 2), nrow =2, ncol = 2)
str(a)
scale(a)
a
a
y = c(2, 3)
y
union(x,y)
union(a,y)
a
?as.Date
z <- as.Date(x, "%d%b%Y")
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
z
z
pairs(z)
a
pairs(a)
a
?repeat
;
repeat
;
help(repeat)
help repeat
help "repeat"
help("repeat")
4 / 1014
[1]
4 / 1014 / 128
4 / 1014 / 54
4 / 1014 / 358
4 / 1014 / 429
4 / 1014 / 503
4 / 1014 / 54 + 4 / 1024 / 375
4 / 1014 / 128 + 4 / 1024 / 375
5 * 1000000 / 1024
ans
answer
4882 / 1024
sec = 4
0.5 / 1014 / 54
0.5 / 1000 / 54
0.5 / 1000 / 128
128/375 + 1
128 / 1.341333
95.42746 / 10 ^ 6
9.5 * 0.8
0.8x = 0.8 * 10.5
0.8 * 10.5 / 0.9
1000 / 7200
1000 / 7200 /2
1000 / 7200 /2
3600 / 7200 / 2
3600 / 7200
s1 = (sqrt(6) + sqrt(2))/4
s1
s2 = 0
v1 = [1, 1, 1]
v1 = c(1, 1, 1)
v1
v1 = v1 /sqrt(3)
v1
v1 * (sqrt(6) - sqrt(2))/4
v1 * v2
v2 = (0, 2, 0)
v2 = c(0, 2, 0)
v1 %*% v2
q %*% q
ls
clea
clear
v1
crossprod()
crossprod(c(1, 1, 1), c(0, 2, 0))
library(tree)
install.packages(tree)
install.packages("tree")
library(tree)
tf <- tree(log(median_house_value) ~ longitude + latitude, data = ca)
plot(tf)
text(tf, cex=0.75)
set.seed(1)
x <- read.csv("data/CAPA.csv", as.is=TRUE)
names(x) <- tolower(names(x))
x <- na.omit(x)
ca <- x[x$statefp==6,] # just take CA data
trainFlag <- (runif(nrow(ca)) < 0.66)
library(randomForest)
install.packages("randomForest")
library(randomForest)
setwd("/Users/shengwen/Dropbox/Yale/courses/DataMining/ws362_pset04/");
a = rep(0,2)
a
sum(a)
b = rep(1, 2)
b
b %*% a
b %*% a * 12
res = 0
res += b %*% a * 12
res = res + b %*% a * 12
res
res = 0
res
res = res + (b %*% a)[1,1] * 12
res
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
#max(abs(e$my_primal_svm(X4, y4, lam=1, k=1) - ans4))
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
alphas = rep(C,nrow(X)) # this is the right dimension for the output
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
# check results (you should get no errors when testing, but
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
source('~/Dropbox/Yale/courses/DataMining/ws362_pset04/testScript04.R', echo=TRUE)
