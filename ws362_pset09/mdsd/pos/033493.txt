C, Java, Pascal, Ada, and so on, are all imperative languages. They are "imperative" in the sense that they consist of a sequence of commands, which are executed strictly one after the other. Haskell is a functional language. A functional program is a single expression, which is executed by evaluating the expression. Anyone who has used a spreadsheet has experience of functional programming. In a spreadsheet, one specifies the value of each cell in terms of the values of other cells. The focus is on what is to be computed, not how it should be computed.
This book is a unique attempt to teach the reader the Haskell programming language by demonstrating how to write programs that perform interesting tasks such as animation, graphics, robot control, and functional music composition. The book succeeds at introducing the reader to the Haskell language and the idea of functional programming, and the book is a fascinating read with unique projects performed in the Haskell language. This is particularly true if you are interested in multimedia programming. However, intermediate features of the language are brushed over. If you are already familiar with Haskell, this book will teach you interesting ways to look at functional programming and give you some ideas for some interesting projects. If you are new to Haskell, you are going to find yourself somewhat confused when you get to the more advanced material. I therefore recommend that you read this book along with "Haskell:The Craft of Functional Programming" by Thompson. That book is not nearly as interesting as this book, but it fills in all of the intermediate details that are missing in a very detailed manner.
