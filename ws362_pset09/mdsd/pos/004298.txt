As a perennial instructor of the Programming Languages (PL) course, I have been using Sebesta for a long, long time, having used Pratt's texts before that.  There are two categories of books for the PL course:  easy and hard.  The hard ones snow you with formalism and seem to be proud of the fact that they don't provide motivation.  The easy ones are typically boring collections of miscellany with no clear coherence.

Sebesta's seventh edition is the best of the easier category.  I think that it would be more helpful to put the history at the end so that samples of programming languages that illustrate the history aren't there for their "snow" value.  The examples from history could then be annotated with information taught in earlier chapters.  I am happy that context free grammars (CFG) are early in the book, but sad that Chomsky's Hierarchy is neglected, even poorly treated, with assumptions left unstated about CFGs.  I generally spend several weeks on automata, since our discrete mathematics course does not get far enough to treat automata, using the excellent tool JFLAP to make the ideas concrete for my students.  (Search the web for that tool.)  Chomsky's hierarchy is essential to understanding PLs.

I am happy that semantics is early in the book, but sad that it too is so inadequately treated.  I spend several weeks on that.  Semantics would be an excellent coherence-producing theme of the book, but denotational semantics gets no use in later chapters.  It could be used to great profit, for example, to ask what the value of a loop control variable is upon exit from a loop in various languages, where the answer for some languages is, "It's up to the compiler."

Speaking of compilers, most small colleges can't afford to have a separate course in compiler theory, so I supplement Sebesta's scant treatment of compiling.

Finally, the seventh edition is disappointingly dated.  Someone should rewrite it from the ground up.  One evidence of that is the lack of bibliography entries from the three years prior to its publication.  I don't mean just PL research articles.  I mean things like the availability of JFLAP, mentioned above. Another evidence of a dated text is the way in which older languages still hang around as examples, but newer languages get shortchanged.  SNOBOL4 is said to support pattern matching, but Sebesta neglects to say that patterns are actually a data type distinct from strings in the language, a very modern and  mind-stretching idea.  Python and Perl examples could provide excellent modern opportunities to illustrate Sebesta's points.  Java versus Javascript could illustrate benefits of strong typing or the fact that Javascript's arrays are implemented as hash tables or that Javascript's functions are first-class entities.  Given the strong background of our students in Java, many chapters of the book are trivialized, since their content is already known to beginning Java programmers.  For example, comparing the "?:" operator with the "if" statement in Java gives an example of functional versus procedural paradigms of programming.

My textbooks in other courses are hard enough that my classroom role is to explain them.  Sebesta is so easy as a text that my classroom role is to explain what Sebesta leaves out
