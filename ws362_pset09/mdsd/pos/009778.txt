The authors describe well what is meant by lean software development. An "agile" approach that involves planning and delivering software in small, frequent steps. As opposed to the traditional big delivery waterfall format.

One merit of the book is in its recap of quality management in manufacturing. Perhaps some readers who hail strictly from a software background might be unfamiliar with those ideas. Storied figures like Taylor and Deming and Toyoda and their contributions to optimal manufacturing are mentioned. Along with successful projects like the US Polaris submarine and the Boeing 777. Many of the ideas are applicable to software, and you might draw inspiration from them.

A key point is to only write code for essential features. Inessential code is bad for two reasons. It wastes programmer time. More importantly, it increases the chance (or certainty) that the overall code gets bloated and brittle. Thus, the unnecessary maintainance cost is the main cost of inessential code.

Sharp readers may also notice the complete absence of any reference to Extreme Programming (XP). Remember in the late 90s when XP was red hot, and the [supposed] answer to software development? To some people, agile programming is closely linked to XP. But to the Poppendiecks, apparently not. You might wonder, though. This book is part of a series edited by Kent Beck, whose name is synonymous with XP. Brittleness with XP has been increasingly noted in recent years. Perhaps this book is part of a trend to quietly deprecate XP, while still being under the rubric of agile programming. Ironic. None of the other reviewers seems to have noticed the absence of XP.

One problem with the book is its uncritical use of Google as an example of a company whose software "invariably delights users". The latest Fortune magazine has a cover article on Google. It reports that Google has over 80 projects made available to the public. 80? You did not know this, perhaps? Which is precisely the point. The vast majority of those have gained no significant traction in the marketplace. At one level, Google is deliberately experimenting with a vast set of ideas, throwing these at a wall and seeing what sticks. But in doing so, it refutes the book's claim about an invariable delight
