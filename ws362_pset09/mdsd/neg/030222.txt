The problem with this book is more fundamental than a misleading title or a missed analogy with Martin Fowler's Refactoring book. The author completely misunderstands and misrepresents the practice of refactoring. Developers do not "stop" to refactor because their original design was wrong; quite the contrary, refactoring is an integral and ongoing part of Agile development. There is no "stopping" and the act of refactoring does not extend the development timeline. "Prefactoring" is nothing more than traditional, up-front design. The author attempts to co-opt terms that have a specific meaning, much like Humpty Dumpty in Through the Looking-Glass, when he tells Alice, "When I use a word, it means just what I choose it to mean, neither more nor less." 

The book is worse than useless; if it were merely useless, it would convey no information. Instead, it actually misleads readers with inaccurate information. Consider the comments of reviewer ueberhund, who writes refactoring "is the act of re-writing and re-working code until it reaches a state of perfection. Since perfection is never achieved, the work of refactoring goes on for ever." Also note the comments of reviewer Thomas Duff, who writes, "Prefactoring is making sure good design techniques are practiced up front to help avoid having to refactor as much later." These comments illustrate that many software professionals thoroughly misunderstand the basic concepts of adaptive or Agile development. A book like this one exacerbates that problem. 

The software industry is currently in a time of change, when adaptive methods are being more widely adopted and integrated with the best practices of information technology organizations. It is the worst possible time for misinformation like this, because it muddies the waters just when people need to understand accurately the risks and potential value of various approaches to software development.
