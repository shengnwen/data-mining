I found little original material in this book.

Chapters 1-3 cover many issues (products vs. services, horizontal vs. vertical markets, enterprise vs. consumer customers, platform vs. complementor, focus on customer solutions rather than focus on bleeding edge technology, commercial vs. open-source, too many software companies,) that are well known to industry insiders. Is it news that product-based software companies generate gross margins in excess of 90% or that many of these same companies (for example, those without defensible intellectual property or a dominant market share) eventually deteriorate into service companies with thinner margins? Is it news that some software companies sell software to consumers, whereas others sell software to enterprises? For such insights the good professor pulls down the big consulting bucks and is seated on Boards of Directors?

Also, in Chapter 3 Professor Cusumano implies that Microsoft makes a practice of building incompatibilities into new software releases for financial gain: "In some cases, software companies can practically force consumers and enterprises to upgrade their software ... as they build in incompatibilities with older file formats or at least make old software programs difficult to use with new versions of the same programs. Microsoft did this brilliantly ..." In my opinion, Microsoft has done a better job than just about any other software company at ensuring that new versions of software are compatible with old versions. Consider, as just one example, the PINVOKE interoperability mechanism found in .NET, which supports invocation of old unmanaged code from the .NET managed environment (backwards compatibility) as well as invocation of new managed .NET code from an unmanaged environment (forward compatibility).

Chapter 4 begins with the following sentence: "Software development is the core technical activity for all companies in the software products and services business." By the way, did you know that the core activity of GM and Ford is to make cars? The chapter then goes on to inform us that such Microsoft development practices as modular design, a deadline for daily code checkins, a nightly build, automated regression testing, immediate fixing of all changes that break the build, regular code freezes, and an iterative approach to design and implementation are all key parts of an advanced and sophisticated software development process. Many software companies besides Microsoft have had these practices in place for years. What is new here? The text of this chapter is also riddled with such useless advice as: the software development process should be structured, but not too structured.

Chapter 5 is titled "Software Entrepreneurship: Essential Elements of a Successful Start-up." What I came away with is that a mere 6 in 10000 business plans end up going public and when they do, over 95% of the equity is held by the VC's. The fact is: in these days of behemoths like Microsoft, Oracle, and IBM, a software startup has about as much of a chance of hitting it big as an oil refining startup had in the 1880's after John D. Rockefeller, the first incarnation of Bill Gates, "combined" the oil industry (see Daniel Yergin's "The Prize"). As Larry Ellison frequently reminds us, consolidation is the name of the game these days in the software industry. In Chapter 3, Professor Cusumano himself states: "It is also probably true that there are now too many software companies in the world by a factor of three or more, and far too many of them are public and have received venture capital funding." In light of this fact, Professor Cusumano perhaps should not have devoted an entire chapter to software entrepreneurship. A better use of his time might have been to devote a chapter to exploring how several companies of moderate size can be consolidated to form a software enterprise with enough heft to begin to compete with the behemoths. There are many interesting issues in this area, such as: how one can identify a constellation of companies that would make good candidates for such a consolidation; how one can resolve the inevitable control issues that arise between the respective BOD's; how one can address post-consolidation issues, such as the integration of software code bases or sales forces; how one can successfully manage the layoffs resulting from a consolidation. Given the pending merger of Symantec and Veritas, it seems the topic of consolidation and M&A should have been discussed in greater detail. For example, consolidation of most of the mid-sized companies in the business intelligence market (for example, HYSL, BOBJ, COGN, MSTR, INFA) or the application server/EAI market (for example, BEAS, TIBX, WEBM, VITR) would create leaner and more viable entities. The pending buyout of Sungard Data Systems by a group of private equity firms suggests one way in which this could happen: a consortium of private equity firms could assemble the considerable capital required to buy out a number of mid-sized firms in one market and then stitch them together. The sooner the software industry leaves behind bubble dreams of IPO's, consolidates, eliminates duplicate product offerings, and sheds the armies of redundant workers, the sooner the industry will return to profitability and healthy growth.

Chapter 6 consists of a set of case studies of software startups. This chapter reminded me that software professionals (even "industry and academic luminaries") almost always fail to understand that just supplying cool, flexible technology to their customers does not constitute a profitable business model. Take the case study of firstRain, whose products enable "real-time business activity monitoring" (a buzz phrase, BTW, that I have heard dozens of times in the last couple of years).  Professor Cusumano comments: "I find their solution for creating applications for handheld devices compelling, but ... there is the issue of what to do with some interesting technology." The case study of H5 reveals the same problem: "[Like] firstRain, [H5] had developed a novel technology in search of an application." As an antidote to their fascination with interesting technology, software entrepreneurs should read Jim Collins' book "Good to Great:" "[Those executives who transformed their companies from good businesses into great businesses] displayed a remarkable discipline to unplug all sorts of extraneous junk ... Across eighty-four interviews with good-to-great executives, fully 80 percent didn't even mention technology as one of the top five factors in the transformation." Could the reason why enterprise software capex has plunged so precipitously over the last several years be that enterprises have been "unplugging extraneous junk" in the form of cool, but non-essential, software packages (AKA "shelfware")? The case study of NetNumina, on the other hand, reminds us of how terrible software professionals have been at valuing their companies realistically: barely profitable and with revenues of $14.4M in 2000, NetNumina was offered $50M by BEA to sell out; "But after experiencing a $200 million IPO with OEC, [management declined the offer. ... Now] the founders and holders of common stock and options will probably never see any money from this venture. ... The founders are now either gone or reduced to salaried executives." On second thought, part of BEA's $50M was probably to be paid in inflated BEA stock, so the deal might not have been so good after all. [BTW, my advice to H5 is that they should seek to be acquired by FIC, although recently they have found an excellent application for their technology in the automated review and characterization of corpora of legal documents.
