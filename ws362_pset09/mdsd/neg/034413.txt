I'm reading the first chapter "Ruby in Review" and it is chock full of typos and mis-usages.  This is particularly disconcerting pertaining to the very first sample program; e.g. it contains the statement "str.chomp!" but then the the ensuing explanation alternately refers to "chomp" as well as the previously un-discussed "chop".  I'm an experienced Perl programmer and know the difference, but this must be confusing to other readers not lucky enough to have such background.  Furthermore, referring to the same "chomp!" operation, the exclamation point is referred to as a prefix.  This is incorrect: it's a suffix.  

Computer language interpreters including Ruby itself would balk at such imprecision in code instuctions, and therefore I balk at such imprecision in English.  It makes me wary that code samples later in the book will contain typos, though I give the book one star more than the minimum because the first sample program as entered in the book does run properly.  Still though the editors should be ashamed.  

I see this over and over with technical books: the first chapter(s) are flawed with such typos, probably because they get written and reviewed first, several months before the rest of the volume is finished.  Further indication of this is the author's comment near the end of the first chapter that he is unaware of other languages with the "===" operator.  Perhaps he wrote this for the first edition; by the time he wrote the second edition, particularly with the explosion of Ruby on Rails and Ajax, he should know that Javascript also provides the "===" operator (as does PHP).  

In addition, the title of this volume is misleading and pretentious.  Ruby suffers from the same "there's MORE than one WAY to do it" approach as Perl (e.g. "poetry mode" that dispenses with parentheses around method arguments).  Perl has proven this sort of thing is a drawback, not a benefit.  It's derisively referred to as a "write-only" language, and I predict Ruby will be considered likewise after 3-5 years when a sufficient base of Ruby code exists such that Ruby "maintenance" programmers will be in demand.

Furthermore, the author frequently notes how some of these multiple ways to accomplish things in Ruby can "confuse the parser"; there's no arguing this is a drawback.  It can only further slow down a language already slow due to its interpreted, dynamically-typed, object-oriented nature.

Tech authors, do yourself a favor, and have somebody (re)edit your initial introductory chapter(s) at the tail end of the process, otherwise risk making a bad first impression.  Programmers, do yourself a favor, and don't just blindly jump on the Ruby bandwagon
