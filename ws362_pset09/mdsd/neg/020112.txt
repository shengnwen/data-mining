I was assigned to read and use this book for a Methods class at CMU. Jackson did a good job of selling the concept of problem frames to me. They seem like a good way to model a system, properly abstracting the problem into distinct interacting segments. It produces diagrams which are helpful as a general architectural overview and are generally largely understandable by non-technical customers. The concept has potential.

Unfortunately, the book does not live up to the concept. The main flaw in the book is found the first time that you need to look up a concept in a prior chapter. Jackson tends to mention a given concept, or a given definition, only once in the book and he uses no way of setting off the concepts and definitions from the rest of the text on the page. Further exacerbating the problem, he makes the cardinal error of software engineers, using common words as his terminology, and redefining them for his purposes. Not only does this mean that his terms don't stand out from the text, but this also means that the reader will be forced to puzzle out whether Jackson is referring to "machine" as a term within his framework, or simply referring to the dictionary definition of a machine.

It's not all bad. Jackson does have a friendly conversational style to his writing that turned me on to the concept while reading the chapters the first time. Unfortunately, the reread entirely turned me off
